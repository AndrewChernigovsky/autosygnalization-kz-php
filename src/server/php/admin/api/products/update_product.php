<?php

$log_file = __DIR__ . '/debug.log';
file_put_contents($log_file, "--- NEW REQUEST (update_product.php) ---\n", FILE_APPEND);

require_once __DIR__ . '/../../../../vendor/autoload.php';
require_once __DIR__ . '/../../../config/config.php';

  use DATABASE\DataBase;

header("Access-control-allow-origin: http://localhost:5173");
header("Access-control-allow-headers: Content-Type, Authorization");
header('Access-Control-Allow-Methods: POST, OPTIONS, PUT');

if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
  http_response_code(200);
  exit;
}

header('Content-Type: application/json');

$dbConnection = DataBase::getConnection();
$pdo = $dbConnection->getPdo();

$data = json_decode(file_get_contents("php://input"), true);

file_put_contents($log_file, "\n\n", FILE_APPEND);
file_put_contents($log_file, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n", FILE_APPEND);
file_put_contents($log_file, "üîß [PHP] update_product.php - –ù–û–í–´–ô –ó–ê–ü–†–û–°\n", FILE_APPEND);
file_put_contents($log_file, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n", FILE_APPEND);
file_put_contents($log_file, "üïê –í—Ä–µ–º—è: " . date('Y-m-d H:i:s') . "\n", FILE_APPEND);
file_put_contents($log_file, "üì¶ Product ID: " . ($data['id'] ?? '–ù–ï–¢') . "\n", FILE_APPEND);
file_put_contents($log_file, "üì¶ Title: " . ($data['title'] ?? '–ù–ï–¢') . "\n", FILE_APPEND);
file_put_contents($log_file, "üì¶ Tabs count: " . (isset($data['tabs']) && is_array($data['tabs']) ? count($data['tabs']) : 0) . "\n", FILE_APPEND);

if (isset($data['tabs']) && is_array($data['tabs'])) {
  file_put_contents($log_file, "\nüìä [PHP] tabs –ü–û–õ–£–ß–ï–ù–´ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n", FILE_APPEND);
  foreach ($data['tabs'] as $tIdx => $tab) {
    file_put_contents($log_file, "  –í–∫–ª–∞–¥–∫–∞ [$tIdx]: " . ($tab['title'] ?? '–ë–ï–ó –ù–ê–ó–í–ê–ù–ò–Ø') . "\n", FILE_APPEND);
    if (isset($tab['content']) && is_array($tab['content'])) {
      foreach ($tab['content'] as $iIdx => $item) {
        $icon = $item['path-icon'] ?? '';
        $status = empty($icon) ? '‚ùå –ü–£–°–¢–û' : (strpos($icon, 'blob:') === 0 ? '‚ö†Ô∏è BLOB' : '‚úÖ –°–ï–†–í–ï–†');
        file_put_contents($log_file, "    –≠–ª–µ–º–µ–Ω—Ç [$tIdx][$iIdx]: \"" . ($item['title'] ?? '') . "\" ‚Üí $status ‚Üí \"$icon\"\n", FILE_APPEND);
      }
    }
  }
}

if (!isset($data['id'])) {
  http_response_code(400);
  echo json_encode(['message' => 'Product ID not provided.']);
  exit;
}

$productId = $data['id'];

function getIconsFromTabs(array $tabs): array
{
  $icons = [];
  foreach ($tabs as $tab) {
    if (isset($tab['content']) && is_array($tab['content'])) {
      foreach ($tab['content'] as $item) {
        if (!empty($item['path-icon'])) {
          $icons[] = $item['path-icon'];
        }
      }
    }
  }
  return $icons;
}

try {
  $pdo->beginTransaction();

  // Handle gallery image deletions and check if gallery changed
  $stmt = $pdo->prepare("SELECT gallery FROM Products WHERE id = :id");
  $stmt->execute([':id' => $productId]);
  $currentProduct = $stmt->fetch(PDO::FETCH_ASSOC);

  $galleryChanged = false;
  $galleryToSave = [];
  
  if ($currentProduct) {
    $currentGallery = json_decode($currentProduct['gallery'], true) ?: [];
    $newGallery = $data['gallery'] ?? [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≥–∞–ª–µ—Ä–µ—è
    if (json_encode($currentGallery) !== json_encode($newGallery)) {
      $galleryChanged = true;
      $galleryToSave = $newGallery;
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–π –≥–∞–ª–µ—Ä–µ–µ
      $imagesToDelete = array_diff($currentGallery, $newGallery);
      foreach ($imagesToDelete as $imageUrl) {
        $filePath = $_SERVER['DOCUMENT_ROOT'] . parse_url($imageUrl, PHP_URL_PATH);
        if (file_exists($filePath)) {
          unlink($filePath);
        }
      }
    } else {
      // –ì–∞–ª–µ—Ä–µ—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –∏–∑ –ë–î
      $galleryToSave = $currentGallery;
    }
  } else {
    // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ –ë–î (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏), –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    $galleryChanged = true;
    $galleryToSave = $data['gallery'] ?? [];
  }

  // Handle tab icon deletions
  $tabsStmt = $pdo->prepare("SELECT tabs_data FROM TabsAdditionalProductsData WHERE product_id = :product_id");
  $tabsStmt->execute([':product_id' => $productId]);
  $currentTabsData = $tabsStmt->fetch(PDO::FETCH_ASSOC);

  if ($currentTabsData) {
    $currentTabs = json_decode($currentTabsData['tabs_data'], true) ?: [];
    $newTabs = $data['tabs'] ?? [];

    $currentIcons = getIconsFromTabs($currentTabs);
    $newIcons = getIconsFromTabs($newTabs);

    $iconsToDelete = array_diff($currentIcons, $newIcons);

    foreach ($iconsToDelete as $iconUrl) {
      $filePath = $_SERVER['DOCUMENT_ROOT'] . parse_url($iconUrl, PHP_URL_PATH);
      if (file_exists($filePath)) {
        unlink($filePath);
      }
    }
  }

  // Update Products table - –∏—Å–ø–æ–ª—å–∑—É–µ–º $galleryToSave –≤–º–µ—Å—Ç–æ $data['gallery']
  $productStmt = $pdo->prepare("
      UPDATE Products SET
          model = :model, title = :title, description = :description, price = :price,
          is_published = :is_published, is_popular = :is_popular, is_special = :is_special, gallery = :gallery,
          category = :category, link = :link, functions = :functions, options = :options,
          options_filters = :options_filters, autosygnals = :autosygnals, price_list = :price_list
      WHERE id = :id
  ");

  $link = "/product?category={$data['category']}&id={$data['id']}";
  $productData = [
    ':id' => $productId,
    ':model' => $data['model'] ?? '',
    ':title' => $data['title'] ?? '',
    ':description' => $data['description'] ?? '',
    ':price' => $data['price'] ?? 0,
    ':price_list' => json_encode($data['price_list'] ?? []),
    ':is_published' => !empty($data['is_published']) ? 1 : 0,
    ':is_popular' => !empty($data['is_popular']) ? 1 : 0,
    ':is_special' => !empty($data['is_special']) ? 1 : 0,
    ':gallery' => json_encode($galleryToSave), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –≥–∞–ª–µ—Ä–µ—é
    ':category' => $data['category'] ?? 'uncategorized',
    ':link' => $link,
    ':functions' => json_encode($data['functions'] ?? []),
    ':options' => json_encode($data['options'] ?? []),
    ':options_filters' => json_encode($data['options-filters'] ?? []),
    ':autosygnals' => json_encode($data['autosygnals'] ?? []),
  ];
  file_put_contents($log_file, "Bind data: " . print_r($productData, true) . "\n", FILE_APPEND);
  $productStmt->execute($productData);

  // Update TabsAdditionalProductsData table
  if (isset($data['tabs'])) {
    file_put_contents($log_file, "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n", FILE_APPEND);
    file_put_contents($log_file, "üîÄ [PHP] –£–ú–ù–û–ï –°–õ–ò–Ø–ù–ò–ï tabs_data - –ù–ê–ß–ê–õ–û\n", FILE_APPEND);
    file_put_contents($log_file, "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n", FILE_APPEND);
    
    // –£–ú–ù–û–ï –°–õ–ò–Ø–ù–ò–ï: —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é tabs_data –∏–∑ –ë–î –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    file_put_contents($log_file, "üìä [PHP] –ß–∏—Ç–∞–µ–º tabs_data –∏–∑ –ë–î...\n", FILE_APPEND);
    $currentTabsStmt = $pdo->prepare("SELECT tabs_data FROM TabsAdditionalProductsData WHERE product_id = :product_id");
    $currentTabsStmt->execute([':product_id' => $productId]);
    $currentTabsResult = $currentTabsStmt->fetch(PDO::FETCH_ASSOC);
    
    $currentTabsData = $currentTabsResult ? json_decode($currentTabsResult['tabs_data'], true) : [];
    $newTabsData = $data['tabs'];
    
    file_put_contents($log_file, "\nüì• [PHP] currentTabsData (–∏–∑ –ë–î):\n", FILE_APPEND);
    if (!empty($currentTabsData)) {
      foreach ($currentTabsData as $tIdx => $tab) {
        file_put_contents($log_file, "  –í–∫–ª–∞–¥–∫–∞ [$tIdx]: " . ($tab['title'] ?? '') . "\n", FILE_APPEND);
        if (isset($tab['content'])) {
          foreach ($tab['content'] as $iIdx => $item) {
            $icon = $item['path-icon'] ?? '';
            file_put_contents($log_file, "    –≠–ª–µ–º–µ–Ω—Ç [$tIdx][$iIdx]: \"" . ($item['title'] ?? '') . "\" ‚Üí \"$icon\"\n", FILE_APPEND);
          }
        }
      }
    } else {
      file_put_contents($log_file, "  (–ø—É—Å—Ç–æ)\n", FILE_APPEND);
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ frontend, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º path-icon –∏–∑ –ë–î, –µ—Å–ª–∏ –≤ frontend –ø—É—Å—Ç–æ–π
    file_put_contents($log_file, "\nüîÄ [PHP] –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–∏—è–Ω–∏–µ...\n", FILE_APPEND);
    $mergedCount = 0;
    foreach ($newTabsData as $tabIndex => $tab) {
      if (isset($tab['content']) && is_array($tab['content'])) {
        foreach ($tab['content'] as $itemIndex => $item) {
          // –ï—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å path-icon, –∞ –≤–æ frontend –ø—É—Å—Ç–æ–π –∏–ª–∏ blob - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –ë–î
          if (isset($currentTabsData[$tabIndex]['content'][$itemIndex]['path-icon'])) {
            $dbPath = $currentTabsData[$tabIndex]['content'][$itemIndex]['path-icon'];
            $frontendPath = $item['path-icon'] ?? '';
            
            // –ï—Å–ª–∏ frontend path –ø—É—Å—Ç–æ–π –∏–ª–∏ blob URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –ë–î
            if (empty($frontendPath) || strpos($frontendPath, 'blob:') === 0) {
              $newTabsData[$tabIndex]['content'][$itemIndex]['path-icon'] = $dbPath;
              $mergedCount++;
              file_put_contents($log_file, "  ‚úÖ [PHP] –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—É—Ç—å –∏–∑ –ë–î –¥–ª—è tab[$tabIndex][$itemIndex]: \"$dbPath\" (–±—ã–ª: \"$frontendPath\")\n", FILE_APPEND);
            } else {
              file_put_contents($log_file, "  ‚ÑπÔ∏è [PHP] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ frontend –¥–ª—è tab[$tabIndex][$itemIndex]: \"$frontendPath\"\n", FILE_APPEND);
            }
          } else {
            file_put_contents($log_file, "  ‚ÑπÔ∏è [PHP] –í –ë–î –Ω–µ—Ç –ø—É—Ç–∏ –¥–ª—è tab[$tabIndex][$itemIndex], –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ frontend\n", FILE_APPEND);
          }
        }
      }
    }
    
    file_put_contents($log_file, "\nüìä [PHP] newTabsData –ü–û–°–õ–ï —Å–ª–∏—è–Ω–∏—è (–±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î):\n", FILE_APPEND);
    foreach ($newTabsData as $tIdx => $tab) {
      file_put_contents($log_file, "  –í–∫–ª–∞–¥–∫–∞ [$tIdx]: " . ($tab['title'] ?? '') . "\n", FILE_APPEND);
      if (isset($tab['content'])) {
        foreach ($tab['content'] as $iIdx => $item) {
          $icon = $item['path-icon'] ?? '';
          $status = empty($icon) ? '‚ùå –ü–£–°–¢–û' : (strpos($icon, 'blob:') === 0 ? '‚ö†Ô∏è BLOB' : '‚úÖ –°–ï–†–í–ï–†');
          file_put_contents($log_file, "    –≠–ª–µ–º–µ–Ω—Ç [$tIdx][$iIdx]: \"" . ($item['title'] ?? '') . "\" ‚Üí $status ‚Üí \"$icon\"\n", FILE_APPEND);
        }
      }
    }
    file_put_contents($log_file, "\n‚úÖ [PHP] –°–ª–∏—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—É—Ç–µ–π –∏–∑ –ë–î: $mergedCount\n", FILE_APPEND);
    
    $tabsJson = json_encode($newTabsData);
    file_put_contents($log_file, "üíæ [PHP] –°–æ—Ö—Ä–∞–Ω—è–µ–º tabs_data –≤ –ë–î...\n", FILE_APPEND);
    
    $updateTabsStmt = $pdo->prepare("
            INSERT INTO TabsAdditionalProductsData (product_id, tabs_data) 
            VALUES (:product_id, :tabs_data)
            ON DUPLICATE KEY UPDATE tabs_data = :tabs_data
        ");
    $updateTabsStmt->execute([':product_id' => $productId, ':tabs_data' => $tabsJson]);
    
    file_put_contents($log_file, "‚úÖ [PHP] tabs_data –°–û–•–†–ê–ù–ï–ù –í –ë–î\n", FILE_APPEND);
    file_put_contents($log_file, "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n", FILE_APPEND);
  }

  $pdo->commit();
  
  file_put_contents($log_file, "\n‚úÖ [PHP] update_product –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù\n", FILE_APPEND);
  file_put_contents($log_file, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n", FILE_APPEND);

  http_response_code(200);
  echo json_encode(['message' => 'Product updated successfully.', 'link' => $link]);

} catch (Exception $e) {
  if ($pdo && $pdo->inTransaction()) {
    $pdo->rollBack();
  }
  http_response_code(500);
  echo json_encode(['message' => 'Failed to update product: ' . $e->getMessage()]);
  file_put_contents($log_file, "Error: " . $e->getMessage() . "\n", FILE_APPEND);
}
